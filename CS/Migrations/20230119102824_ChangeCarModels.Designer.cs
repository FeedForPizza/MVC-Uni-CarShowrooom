// <auto-generated />
using System;
using CS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CS.Migrations
{
    [DbContext(typeof(CSContext))]
    [Migration("20230119102824_ChangeCarModels")]
    partial class ChangeCarModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CS.Models.CarExtra", b =>
                {
                    b.Property<int>("ExtraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExtraID"), 1L, 1);

                    b.Property<int>("CarsID")
                        .HasColumnType("int");

                    b.Property<string>("ExtraName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ExtraID");

                    b.HasIndex("CarsID");

                    b.ToTable("CarExtra");
                });

            modelBuilder.Entity("CS.Models.Cars", b =>
                {
                    b.Property<int>("CarsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarsID"), 1L, 1);

                    b.Property<decimal>("AverageExpenseCOMBINED")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AverageExpenseONROAD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AverageExpenseTOWN")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Doors")
                        .HasColumnType("int");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int");

                    b.Property<int>("MinSpeed")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StorageID")
                        .HasColumnType("int");

                    b.Property<int>("TestDriveID")
                        .HasColumnType("int");

                    b.Property<string>("TypeCompartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeEngine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearOfManufacture")
                        .HasColumnType("datetime2");

                    b.Property<int>("ordersOrderID")
                        .HasColumnType("int");

                    b.HasKey("CarsID");

                    b.HasIndex("StorageID");

                    b.HasIndex("TestDriveID");

                    b.HasIndex("ordersOrderID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CS.Models.Orders", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extra")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceWithExtras")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StorageID")
                        .HasColumnType("int");

                    b.Property<decimal>("SumOfOrder")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("StorageID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CS.Models.Storage", b =>
                {
                    b.Property<int>("StorageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageID"), 1L, 1);

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearOfManufacture")
                        .HasColumnType("datetime2");

                    b.HasKey("StorageID");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("CS.Models.TestDrive", b =>
                {
                    b.Property<int>("TestDriveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestDriveID"), 1L, 1);

                    b.Property<string>("ClientFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOTestDrive")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfQuery")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestDriveID");

                    b.ToTable("TestDrive");
                });

            modelBuilder.Entity("CS.Models.CarExtra", b =>
                {
                    b.HasOne("CS.Models.Cars", "Cars")
                        .WithMany("carExtras")
                        .HasForeignKey("CarsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CS.Models.Cars", b =>
                {
                    b.HasOne("CS.Models.Storage", "storage")
                        .WithMany("cars")
                        .HasForeignKey("StorageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CS.Models.TestDrive", "testDrive")
                        .WithMany("cars")
                        .HasForeignKey("TestDriveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CS.Models.Orders", "orders")
                        .WithMany("cars")
                        .HasForeignKey("ordersOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("orders");

                    b.Navigation("storage");

                    b.Navigation("testDrive");
                });

            modelBuilder.Entity("CS.Models.Orders", b =>
                {
                    b.HasOne("CS.Models.Storage", "storage")
                        .WithMany("orders")
                        .HasForeignKey("StorageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("storage");
                });

            modelBuilder.Entity("CS.Models.Cars", b =>
                {
                    b.Navigation("carExtras");
                });

            modelBuilder.Entity("CS.Models.Orders", b =>
                {
                    b.Navigation("cars");
                });

            modelBuilder.Entity("CS.Models.Storage", b =>
                {
                    b.Navigation("cars");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("CS.Models.TestDrive", b =>
                {
                    b.Navigation("cars");
                });
#pragma warning restore 612, 618
        }
    }
}
